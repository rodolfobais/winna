<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<modification>
    <code>open4dev_stock_module</code>
    <link>http://www.opencart.com/index.php?route=extension/extension/info&amp;extension_id=18773</link>
    <name>Option combination stock management module (Opencart 2.3.0.2)</name>
    <version>1.3.6</version>
    <author>open4dev</author>
    <file error="log" path="admin/controller/common/column_left.php">
        <operation>
            <search><![CDATA[hasPermission('access', 'catalog/recurring')]]></search>
            <add position="before"><![CDATA[    
			if ($this->user->hasPermission('access', 'catalog/stock') && $this->config->get('stock_module_enabled')) {
				$this->load->language('catalog/stock');
				$catalog[] = array(
					'name'	   => $this->language->get('sm_text_menu_stock'),
					'href'     => $this->url->link('catalog/stock', 'token=' . $this->session->data['token'], true),
					'children' => array()		
				);
			}      	
      ]]></add>
        </operation>
    </file>
    <file error="log" path="admin/model/catalog/product.php">
        <operation>
            <search><![CDATA['required'             => $product_option['required']				]]></search>
            <add position="before"><![CDATA[        'stock_enabled'        => $product_option['stock_enabled'],]]></add>
        </operation>
        <operation>
            <search><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "product_option SET product_id = '" . (int)$product_id . "', option_id = '" . (int)$product_option['option_id'] . "', required = '" . (int)$product_option['required'] . "'");]]></search>
            <add position="replace"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "product_option SET product_id = '" . (int)$product_id . "', option_id = '" . (int)$product_option['option_id'] . "', stock_enabled = '" . (isset($product_option['stock_enabled']) ? (int)$product_option['stock_enabled'] : 0) . "', required = '" . (int)$product_option['required'] . "'");]]></add>
        </operation>
        <operation>
            <search><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "product_option SET product_option_id = '" . (int)$product_option['product_option_id'] . "', product_id = '" . (int)$product_id . "', option_id = '" . (int)$product_option['option_id'] . "', required = '" . (int)$product_option['required'] . "'");]]></search>
            <add position="replace"><![CDATA[$this->db->query("INSERT INTO " . DB_PREFIX . "product_option SET product_option_id = '" . (int)$product_option['product_option_id'] . "', product_id = '" . (int)$product_id . "', option_id = '" . (int)$product_option['option_id'] . "', stock_enabled = '" . (isset($product_option['stock_enabled']) ? (int)$product_option['stock_enabled'] : 0) . "', required = '" . (int)$product_option['required'] . "'");]]></add>
        </operation>
        <operation>
            <search><![CDATA[$product_id = $this->db->getLastId();]]></search>
            <add position="after"><![CDATA[   $this->db->query("UPDATE " . DB_PREFIX . "product SET allow_preorder = '" . (int) $data['allow_preorder'] . "' WHERE product_id = '" . $product_id . "'");]]></add>
        </operation>
        <operation>
            <search><![CDATA[$this->db->query("UPDATE " . DB_PREFIX . "product SET model ]]></search>
            <add position="after"><![CDATA[   $this->db->query("UPDATE " . DB_PREFIX . "product SET allow_preorder = '" . (int) $data['allow_preorder'] . "' WHERE product_id = '" . (int)$product_id . "'");]]></add>
        </operation>
        <operation>
            <search><![CDATA[$product_option_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "product_option` po LEFT JOIN `" . DB_PREFIX . "option` o ON (po.option_id = o.option_id) LEFT JOIN `" . DB_PREFIX . "option_description` od ON (o.option_id = od.option_id) WHERE po.product_id = '" . (int)$product_id . "' AND od.language_id = '" . (int)$this->config->get('config_language_id') . "'");]]></search>
            <add position="replace"><![CDATA[$product_option_query = $this->db->query("SELECT * FROM `" . DB_PREFIX . "product_option` po LEFT JOIN `" . DB_PREFIX . "option` o ON (po.option_id = o.option_id) LEFT JOIN `" . DB_PREFIX . "option_description` od ON (o.option_id = od.option_id) WHERE po.product_id = '" . (int)$product_id . "' AND od.language_id = '" . (int)$this->config->get('config_language_id') . "' ORDER BY o.sort_order");]]></add>
        </operation>
    </file>
    <file error="log" path="admin/controller/catalog/product.php">
        <operation>
            <search><![CDATA[$this->load->model('catalog/product');]]></search>
            <add position="before"><![CDATA[ 
  		$this->load->language('catalog/stock');
  		]]></add>
        </operation>
        <operation>
            <search><![CDATA[$data['entry_required'] = $this->language->get('entry_required');]]></search>
            <add position="after"><![CDATA[    
    $data['entry_stock_enabled'] = $this->language->get('sm_entry_stock_enabled'); 
    $data['entry_allow_preorder'] = $this->language->get('sm_entry_allow_preorder'); 
    $data['help_allow_preorder'] = $this->language->get('sm_help_allow_preorder'); 
    $data['entry_no_all_options'] = $this->language->get('sm_entry_no_all_options'); 
      	]]></add>
        </operation>
        <operation>
            <search><![CDATA['required'             => $product_option['required']]]></search>
            <add position="before"><![CDATA[          'stock_enabled'        => (isset($product_option['stock_enabled']) ? $product_option['stock_enabled'] : 0), ]]></add>
        </operation>
        <operation>
            <search><![CDATA[$this->load->model('localisation/stock_status');]]></search>
            <add position="before"><![CDATA[
      	if (isset($this->request->post['allow_preorder'])) {
			$data['allow_preorder'] = $this->request->post['allow_preorder'];
		} elseif (!empty($product_info)) {
			$data['allow_preorder'] = $product_info['allow_preorder'];
		} else {
			$data['allow_preorder'] = 0;
		}
      ]]></add>
        </operation>
        <operation>
            <search><![CDATA[function validateForm() {]]></search>
            <add position="before"><![CDATA[
  /*
   * error values:
   *
   * 1: all stock-enabled should be also required
   * 2: all option values should be set to subtract
   */
  protected function getOptionsInfo($product_options) {
      $result = array();
      $result['error'] = 0;
      $stock_enabled_options = 0;
      foreach ($product_options as $product_option) {
          // check if there are any option values. If not, options are not stored thus no point in including them in the validation check
          if (isset($product_option['product_option_value']) && count($product_option['product_option_value']) > 0 ) {
              if (isset($product_option['stock_enabled']) && ($product_option['stock_enabled'] == 1) ) {
                  $stock_enabled_options ++;
                  if ($product_option['required'] == 0) {
                      // error: all stock-enbaled options should be required
                      $result['error'] = 1;
                      break;
                  }
                  
                  // check that all option values are set to 'subtract'
                  foreach ($product_option['product_option_value'] as $option_value) {
                      if ( $option_value['subtract'] == 0 ) {
                          $result['error'] = 2;
                          break;
                      }
                  }
              }
          }
      }   
      $result['stock_enabled_options'] = $stock_enabled_options;
      //if (($result['error'] == 0) && ($stock_enabled_options == 1)) {
      //    $result['error'] = 3;
      //}
      //$this->log->write('Options info: ' . var_export($result, true));
      return $result;      
  }
        ]]></add>
        </operation>
        <operation>
            <search><![CDATA[if ($this->error && !isset($this->error['warning'])) {]]></search>
            <add position="before"><![CDATA[
    if ($this->config->get('stock_module_enabled') == 1) {
      if (isset($this->request->post['product_option'])) {
        $info = $this->getOptionsInfo($this->request->post['product_option']);
        if ($info['error'] > 0) {
          if ($info['error'] === 1) {
              $this->error['warning'] = $this->language->get('sm_error_not_required');
          } else if ($info['error'] === 2) {
              $this->error['warning'] = $this->language->get('sm_error_option_not_subtract');
          } 
        }
      }
    }
      ]]></add>
        </operation>
        <operation>
            <search><![CDATA[public function add() {]]></search>
            <add position="before"><![CDATA[
  protected function getInvalidStockMessage($error_status, $link) {
    
    $reason = $this->language->get('sm_invalid_stock_reason_unknown');
    switch($error_status) {
      case 1: 
        $reason = $this->language->get('sm_invalid_stock_reason_no_entries');
        break;
      case 2: 
        $reason = $this->language->get('sm_invalid_stock_reason_incomplete_entries');
        break;
      case 3: 
        $reason = $this->language->get('sm_invalid_stock_reason_duplicate_entries');
        break;
    }
    $error = sprintf($this->language->get('sm_attention_invalid_stock'), $link, $reason);
    return $error;
  }
        ]]></add>
        </operation>
        <operation>
            <search><![CDATA[public function delete() {]]></search>
            <add position="after"><![CDATA[    $this->load->model('catalog/stock');]]></add>
        </operation>
        <operation>
            <search><![CDATA[$this->model_catalog_product->deleteProduct($product_id);]]></search>
            <add position="after"><![CDATA[        $this->model_catalog_stock->deleteStock($product_id);]]></add>
        </operation>
        <operation>
            <search><![CDATA[$this->model_catalog_product->addProduct($this->request->post);]]></search>
            <add position="before"><![CDATA[
			if (($this->config->get('stock_module_enabled') == 1) && (isset($this->request->post['product_option'])) ) {
              $info = $this->getOptionsInfo($this->request->post['product_option']);
              $is_stock_enabled = $info['stock_enabled_options'] >= 1; 
		      if ($is_stock_enabled) {
			    if ($this->request->post['status'] == 1) {
                  $this->request->post['status'] = 0;
                  $stock_link = $this->url->link('catalog/stock', 'token=' . $this->session->data['token'], 'SSL');
                  $this->session->data['attention'] = $this->getInvalidStockMessage(1, $stock_link);
                }
                $product_option = & $this->request->post['product_option'];
	          	foreach ($product_option as & $option) {
					if (isset($option['product_option_value']) && count($option['product_option_value']) > 0 ) {
              			if (isset($option['stock_enabled']) && ($option['stock_enabled'] == 1) ) {
              		  		$values = & $option['product_option_value'];
	                  		foreach ($values as & $option_value) {
	                  			$option_value['quantity'] = 0;
	                  		}
                  		}
                	}
                }
                $this->request->post['quantity'] = 0;
			  }
			}
			]]></add>
        </operation>
        <operation>
            <search><![CDATA[$this->model_catalog_product->editProduct($this->request->get['product_id'], $this->request->post);]]></search>
            <add position="before"><![CDATA[
			if ($this->config->get('stock_module_enabled') == 1) {
				$this->load->model('catalog/stock');
                $product_id = (isset($this->request->get['product_id']) ? $this->request->get['product_id'] : "");
				$combinations_before = $this->model_catalog_stock->getProductOptionIds($product_id);
                $was_stock_enabled = $this->model_catalog_stock->isProductStockEnabled($product_id);
			}
			]]></add>
        </operation>
        <operation>
            <search><![CDATA[$this->model_catalog_product->editProduct($this->request->get['product_id'], $this->request->post);]]></search>
            <add position="after"><![CDATA[
			if ($this->config->get('stock_module_enabled') == 1) {
				$combinations_after = NULL;
				$product_id = (isset($this->request->get['product_id']) ? $this->request->get['product_id'] : "");
				$is_stock_enabled = $this->model_catalog_stock->isProductStockEnabled($product_id);
		        //$this->log->write('Is product ' . $product_id . ' stock enabled?' . $is_stock_enabled); 
		        if ($was_stock_enabled || $is_stock_enabled) {
		            //$this->log->write('Stock status: ' . $error_code);
		  			$combinations_after = $this->model_catalog_stock->getProductOptionIds($product_id);
		  			$product_disabled = $this->model_catalog_stock->modifyProductStock($product_id, $combinations_before, $combinations_after);
		  			if ($product_disabled) {
		                $error_code = $this->model_catalog_stock->getStockStatus($product_id);
		  			    $stock_link = $this->url->link('catalog/stock/update', 'token=' . $this->session->data['token'] . '&product_id=' . $product_id, 'SSL');
		  			    $this->session->data['attention'] = $this->getInvalidStockMessage($error_code, $stock_link);
		  			}
		        }
		        if ($is_stock_enabled) {
		        	$this->model_catalog_stock->updateProductQuantitiesFromStock($product_id);
		        }
			}
			]]></add>
        </operation>
        <operation>
            <search><![CDATA[if (isset($this->session->data['success'])) {]]></search>
            <add position="before"><![CDATA[
    if (isset($this->session->data['attention'])) {
      $data['attention'] = $this->session->data['attention'];
      unset($this->session->data['attention']);
    } else {
      $data['attention'] = '';
    }
	   ]]></add>
        </operation>
        <operation>
            <search index="0"><![CDATA[foreach ($product_option['product_option_value'] as $product_option_value) {]]></search>
            <add position="replace"><![CDATA[if (isset($product_option['product_option_value'])) foreach ($product_option['product_option_value'] as $product_option_value) {]]></add>
        </operation>
        <operation>
            <search index="0"><![CDATA[$this->load->model('design/layout');]]></search>
            <add position="before"><![CDATA[$data['stock_module_enabled'] =  $this->config->get('stock_module_enabled') == 1; ]]></add>
        </operation>
    </file>
    <file error="log" path="admin/view/template/catalog/product_list.tpl">
        <operation>
            <search><![CDATA[<?php if ($success) { ?>]]></search>
            <add offset="4" position="replace"><![CDATA[
  <?php if ($attention) { ?>
    <div class="alert alert-warning"><i class="fa fa fa-warning"></i> <?php echo $attention; ?>
      <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
  <?php } else if ($success) { ?>
    <div class="alert alert-success"><i class="fa fa-check-circle"></i> <?php echo $success; ?>
      <button type="button" class="close" data-dismiss="alert">&times;</button>
    </div>
  <?php } ?>
	   ]]></add>
        </operation>
    </file>
    <file error="log" path="admin/view/template/catalog/product_form.tpl">
        <operation>
            <search><![CDATA[<label class="col-sm-2 control-label" for="input-stock-status"><span data-toggle="tooltip" title="<?php echo $help_stock_status; ?>"><?php echo $entry_stock_status; ?></span></label>]]></search>
            <add position="before"><![CDATA[
                <label class="col-sm-2 control-label" for="input-allow-preorder"><span data-toggle="tooltip" title="<?php echo $help_allow_preorder; ?>"><?php echo $entry_allow_preorder; ?></span></label>
                <div class="col-sm-10">
                  <select name="allow_preorder" id="input-allow-preorder" class="form-control">
                  	<?php $selected = 'selected="selected"'; ?>
					<option value="0" <?php echo ($allow_preorder == '0') ? $selected : "";?>><?php echo $text_no; ?></option>
					<option value="2" <?php echo ($allow_preorder == '2') ? $selected : "";?>><?php echo $entry_no_all_options; ?></option>
                    <option value="1" <?php echo ($allow_preorder == '1') ? $selected : "";?>><?php echo $text_yes; ?></option>
                  </select>
                </div>
              </div>
              <div class="form-group">
  	  ]]></add>
        </operation>
        <operation>
            <search index="0"><![CDATA[<input type="hidden" name="product_option[<?php echo $option_row; ?>][type]" value="<?php echo $product_option['type']; ?>" />]]></search>
            <add position="after"><![CDATA[ 
              <?php if ($product_option['type'] == 'select' || $product_option['type'] == 'radio' || $product_option['type'] == 'image') { ?>
                <?php if ($stock_module_enabled) { ?>
				<div class="form-group">
                  <label class="col-sm-2 control-label" for="input-stock-enabled<?php echo $option_row; ?>"><?php echo $entry_stock_enabled; ?></label>
                  <div class="col-sm-10">
                    <select name="product_option[<?php echo $option_row; ?>][stock_enabled]" id="input-stock-enabled<?php echo $option_row; ?>" class="form-control">
                       <option value="1" <?php echo ($product_option['stock_enabled'] ? "selected='selected'" : "");?>><?php echo $text_yes; ?></option>
                       <option value="0" <?php echo (! $product_option['stock_enabled'] ? "selected='selected'" : "");?>><?php echo $text_no; ?></option>
                    </select>
                  </div>
                </div>
                <?php } ?>
              <?php } ?>
	   ]]></add>
        </operation>
        <operation>
            <search index="0"><![CDATA[html += '	<div class="form-group">';]]></search>
            <add position="before"><![CDATA[ 
    <?php if ($stock_module_enabled) { ?>
      if (item['type'] == 'select' || item['type'] == 'radio' || item['type'] == 'image') {
				html += '	<div class="form-group">';
				html += '	  <label class="col-sm-2 control-label" for="input-stock-enabled' + option_row + '"><?php echo $entry_stock_enabled; ?></label>';
				html += '	  <div class="col-sm-10"><select name="product_option[' + option_row + '][stock_enabled]" id="input-stock-enabled' + option_row + '" class="form-control">';
				html += '	      <option value="0"><?php echo $text_no; ?></option>';
				html += '	      <option value="1"><?php echo $text_yes; ?></option>';
				html += '	  </select></div>';
				html += '	</div>';
      }
    <?php } ?>

      ]]></add>
        </operation>
    </file>
    <file error="log" path="admin/controller/catalog/option.php">
        <operation>
            <search><![CDATA[$this->model_catalog_option->editOption]]></search>
            <add position="before"><![CDATA[
  			$this->load->model('catalog/stock');
  			$option_id = $this->request->get['option_id'];
  			$old_option_values = $this->model_catalog_option->getOptionValues($option_id);
  			$new_option_values = isset($this->request->post['option_value']) ? $this->request->post['option_value'] : array();
  		    $used = $this->model_catalog_stock->getOptionValuesUsed($option_id, $old_option_values, $new_option_values);
  		    if ($used > 0) {
  		      $this->language->load('catalog/stock');
  		      $this->error['warning'] = sprintf($this->language->get('sm_error_product_option_value'), $used);
  			  $this->getForm();
  			  return;
  		    }
  	    ]]></add>
        </operation>
    </file>
    <file error="log" path="catalog/model/catalog/product.php">
        <operation>
            <search><![CDATA['required'             => $product_option['required']]]></search>
            <add position="before"><![CDATA[          'stock_enabled'     => $product_option['stock_enabled'], ]]></add>
        </operation>
        <operation>
            <search><![CDATA['name'             => $query->row['name'],]]></search>
            <add position="before"><![CDATA['allow_preorder'             => $query->row['allow_preorder'],]]></add>
        </operation>
    </file>
    <file error="log" path="catalog/controller/checkout/cart.php">
        <operation>
            <search index="0"><![CDATA[if (!$json) {]]></search>
            <add position="before"><![CDATA[
      if ($this->config->get('stock_module_enabled') == 1) {
      	$allow_preorder = isset($product_info['allow_preorder']) && ($product_info['allow_preorder'] == 1);
        if (! isset($json['error']) && (!$allow_preorder) ) {  // if any required field is missing no need to check
          // re-iterate all the options to check if the product is stock enabled          
          $stock_enabled_option = array();
          foreach ($product_options as $product_option) {
            if ($product_option['stock_enabled'] && isset($option[$product_option['product_option_id']])) {
              $stock_enabled_option[$product_option['product_option_id']] = $option[$product_option['product_option_id']];
            }
          }
          if (!empty($stock_enabled_option)) {
            $this->load->model('catalog/stock');
            //$this->log->write('Checking product combination: ' . $product_id . ' Option: ' . var_export($stock_enabled_option, true) . ' quantity:' . $quantity);           
            
            $db_quantity = $this->cart->getCombinationAvailableStock($product_id, $stock_enabled_option);
            $is_available = $db_quantity >= $quantity;
            if (!$is_available) {
              $option_ids = array_values($stock_enabled_option);
              $combination_name = $this->model_catalog_stock->getCombinationName($option_ids, "-");
              $this->language->load('product/stock');
              $json['error']['not_available'] = sprintf($this->language->get('sm_error_not_available'), $combination_name);
              $json['stock'] = $db_quantity;
            } else if ($this->config->get('stock_module_check_cart_quantities') == 1) {
              $cart_product_quantity = $this->cart->getCartQuantity($product_id, $option, $recurring_id);
              $is_available = $db_quantity - $cart_product_quantity >= $quantity;
              if (!$is_available) {
                $option_ids = array_values($stock_enabled_option);
                $combination_name = $this->model_catalog_stock->getCombinationName($option_ids, "-");
                $this->language->load('product/stock');
                $json['error']['not_available'] = sprintf($this->language->get('sm_error_not_available'), $combination_name); // . " - Items already in cart: " . $cart_product_quantity;
                $json['stock'] = $db_quantity;
              }
            }
          }
        }
      }
	    ]]></add>
        </operation>
        <operation>
            <search index="0"><![CDATA[if ($this->cart->hasProducts() || !empty($this->session->data['vouchers'])) {]]></search>
            <add position="before"><![CDATA[
      $data['config_stock_module'] = array(
      		'enabled' 						=> $this->config->get('stock_module_enabled') == 1,
      		'update_stock_display'			=> $this->config->get('stock_module_update_stock_display') == 1,
      		'update_stock_display_method'	=> $this->config->get('stock_module_update_stock_display_behaviour'),
      		'show_cart_quantities'			=> $this->config->get('stock_module_show_cart_quantities') == 1
      );
      ]]></add>
        </operation>
        <operation>
            <search index="0"><![CDATA[if (!$json) {]]></search>
            <add position="after"><![CDATA[        if (isset($db_quantity)) { $json['stock'] = $db_quantity; }]]></add>
        </operation>
        <operation>
            <search><![CDATA[$data['products'][] = array(]]></search>
            <add position="after"><![CDATA['stock_available'			=> isset($product['stock_available']) ? $product['stock_available'] : 0,]]></add>
        </operation>
    </file>
    <file error="log" path="catalog/controller/product/product.php">
        <operation>
            <search><![CDATA[if (!$option_value['subtract'] || ($option_value['quantity'] > 0)) {]]></search>
            <add position="replace"><![CDATA[
      	$show_all_options = isset($product_info['allow_preorder']) && ($product_info['allow_preorder'] == '1' || $product_info['allow_preorder'] == 2);
      	if (!$option_value['subtract'] || ($option_value['quantity'] > 0) || ($show_all_options)) {
      ]]></add>
        </operation>
        <operation>
            <search index="0"><![CDATA[$this->document->setDescription]]></search>
            <add position="after"><![CDATA[
    	  if (file_exists(DIR_TEMPLATE . 'default/stylesheet/stock-module.css')) {
    	    $this->document->addStyle('catalog/view/theme/default/stylesheet/stock-module.css');
    	  }
	      if (file_exists(DIR_TEMPLATE . 'default/stylesheet/stock-module-theme.css')) {
	    	$this->document->addStyle('catalog/view/theme/default/stylesheet/stock-module-theme.css');
	      }    	
	      $this->document->addScript('catalog/view/javascript/open4devutils.js');
    	  $this->document->addScript('catalog/view/javascript/stockmodule.js');
    	]]></add>
        </operation>
        <operation>
            <search><![CDATA[foreach ($this->model_catalog_product->getProductOptions($this->request->get['product_id']) as $option) {]]></search>
            <add position="before"><![CDATA[
            $data['product_stock_enabled'] = false;
            
            $search = array("%text_stock%", "%stock%");
			$replace = array($data['text_stock'], $data['stock']);
			$eReplace = $this->config->get('stock_module_replace_expression');
			$eRemove = $this->config->get('stock_module_remove_expression');
			$eDecorate = $this->config->get('stock_module_decorate_expression');
			$eStock = $this->config->get('stock_module_stock_expression');

			$replace_expression = isset($eReplace) ? addslashes(html_entity_decode($eReplace)) : "";
			$remove_expression = isset($eRemove) ? addslashes(html_entity_decode($eRemove)) : "";
			$stock_expression = isset($eStock) ? addslashes(html_entity_decode($eStock)) : "";
			$decorate_expression = isset($eDecorate) ? addslashes(html_entity_decode($eDecorate)) : "";
			
            $data['config_stock_module'] = array(
      		  'enabled' 						=> $this->config->get('stock_module_enabled') == 1,
      		  'update_stock_display'			=> $this->config->get('stock_module_update_stock_display') == 1,
      		  'update_stock_display_method'		=> $this->config->get('stock_module_update_stock_display_behaviour'),
      		  'show_cart_quantities'			=> $this->config->get('stock_module_show_cart_quantities') == 1,
      		  'change_css'						=> $this->config->get('stock_module_change_product_css') == 1,
      		  'addAvailability'		            => $this->config->get('stock_module_add_availability') == 1,
      		  'replace_expression'              => str_replace($search, $replace, $replace_expression),
      		  'remove_expression'               => str_replace($search, $replace, $remove_expression),
      		  'stock_expression'                => str_replace($search, $replace, $stock_expression),
      		  'decorate_expression'                => str_replace($search, $replace, $decorate_expression)
            );
            $data['config_stock_display'] = $this->config->get('config_stock_display');
            $stock_enabled_options = 0;
      ]]></add>
        </operation>
        <operation>
            <search><![CDATA[foreach ($option['product_option_value'] as $option_value) {]]></search>
            <add position="before"><![CDATA[
                if (($this->config->get('stock_module_enabled') == 1) && $option['stock_enabled']) {
                  $stock_enabled_options ++;
                }
      ]]></add>
        </operation>
        <operation>
            <search><![CDATA['required'             => $option['required']]]></search>
            <add position="before"><![CDATA[					'stock_enabled'        => $option['stock_enabled'],]]></add>
        </operation>
        <operation>
            <search><![CDATA[if ($product_info['minimum']) {]]></search>
            <add position="before"><![CDATA[
            if ($stock_enabled_options > 0) {
              $data['product_stock_enabled'] = true;
            }
      ]]></add>
        </operation>
        <operation>
            <search><![CDATA[	public function review() {]]></search>
            <add position="before"><![CDATA[ 
  public function getStockAvailable() {
    if (isset($this->request->post['product_id'])) {
      $product_id = $this->request->post['product_id'];
    } else {
      $product_id = 0;
    }
    
    if (isset($this->request->post['option'])) {
      $options = $this->request->post['option'];
    } else {
      $options = array();
    }
    if (!$product_id || count($options) === 0) {
		$json['success'] = false;
	    $result = json_encode($json);
	    $this->response->setOutput($result);
	    return $result;
	}
    
    $options = array_values($options);
    
    //$this->log->write("Product id: " . $product_id . " Options: " . var_export($options, TRUE));
    
    $stock = $this->cart->getCombinationAvailableStock($product_id, $options);
    
    $json = array();
    $json['success'] = true;
    $json['stock'] = $stock;
    $result = json_encode($json);
    $this->response->setOutput($result);
    return $result;

  }
			]]></add>
        </operation>
        <operation>
            <search><![CDATA[if ($product_info['quantity'] <= 0) {]]></search>
            <add position="before"><![CDATA[
      $data['text_instock'] = $this->language->get('text_instock');
      $data['text_outofstock'] = $product_info['stock_status'];
      $data['stock_available'] = ($product_info['quantity'] > 0);
      ]]></add>
        </operation>
    </file>
    <file error="log" path="catalog/view/theme/*/template/product/product.tpl">
        <operation>
            <search index="0"><![CDATA[if (json['error']['option']) {]]></search>
            <add position="before"><![CDATA[ 
        if (json['error']['not_available']) {
        	$('.breadcrumb').after('<div class="alert alert-danger">' + json['error']['not_available'] + '<button type="button" class="close" data-dismiss="alert">&times;</button></div>');
          $('html, body').animate({ scrollTop: 0 }, 'slow'); 
        }
        <?php if ($config_stock_module['enabled'] && $config_stock_module['update_stock_display'] && $product_stock_enabled) { ?>
        if (json['stock']) {
          StockModule.updateStockStatus(json['stock']);
        }
        <?php } ?>
      ]]></add>
        </operation>
        <operation>
            <ignoreif>$('#cart &gt; button')</ignoreif>
            <search><![CDATA[$('#cart-total').html(json['total']);]]></search>
            <add position="after"><![CDATA[ 
        <?php if ($config_stock_module['enabled'] && $config_stock_module['update_stock_display'] && $product_stock_enabled) { ?>
        if (json['stock']) {
          StockModule.updateStockStatus(json['stock']);
        }
        <?php } ?>
      ]]></add>
        </operation>
        <operation>
            <ignoreif>$('#cart-total')</ignoreif>
            <search><![CDATA[$('#cart > button').html]]></search>
            <add position="after"><![CDATA[ 
        <?php if ($config_stock_module['enabled'] && $config_stock_module['update_stock_display'] && $product_stock_enabled) { ?>
        if (json['stock']) {
          StockModule.updateStockStatus(json['stock']);
        }
        <?php } ?>
      ]]></add>
        </operation>
        <operation>
            <search><![CDATA[$footer]]></search>
            <add position="before"><![CDATA[
<?php 
$update_combination_stock = $config_stock_module['enabled'] && $config_stock_module['update_stock_display'] && $product_stock_enabled;
$change_product_color = $config_stock_module['enabled'] && $config_stock_module['change_css'];
if ($update_combination_stock || $change_product_color) { 
?>

<script type="text/javascript"><!--
  var StockModule = Open4DevModules.stock;
  StockModule.configure({
  	  originalStockText: '<?php echo $stock; ?>',
  	  stockAvailable: <?php echo ($stock_available ? 'true' : 'false'); ?>,
  	  textInStock: '<?php echo $text_instock; ?>',
  	  textOutOfStock: '<?php echo $text_outofstock; ?>',
  	  stockDisplayMethod: <?php echo $config_stock_module['update_stock_display_method'] ?>,
  	  configStockDisplay: <?php echo $config_stock_display ?>,
  	  changeProductCss: <?php echo $change_product_color ? 'true' : 'false'; ?>,
  	  stockTemplate: '<?php echo $config_stock_module['stock_expression']; ?>',
  	  findSelector: '<?php echo $config_stock_module['replace_expression']; ?>',
  	  removeSelector: '<?php echo $config_stock_module['remove_expression']; ?>',
  	  decorateTemplate: '<?php echo $config_stock_module['decorate_expression']; ?>',
  });
  Open4DevModules.utils.preloader.addImage(StockModule.iconUrl);
<?php 
if ($update_combination_stock) {
	$se_options = array();
	foreach ($options as $option) {
		if ($option['stock_enabled'] == 1) {
			if ($option['type'] == 'select' || $option['type'] == 'radio' || $option['type'] == 'image') {
	  			$se_options[] = 'option[' . $option['product_option_id'] . ']';
	  		}
		}
	}
	echo "  var options = " . json_encode($se_options) . ";\n";
	echo "  StockModule.trackOptionsChanges(options);\n";
} 
?>    
  if ( !StockModule.isStockFieldDecorated() ) {
    StockModule.decorateStockField();
}
//--></script>
<?php } ?>
		]]></add>
        </operation>
    </file>
    <file error="log" path="system/library/cart/cart.php">
        <operation>
            <search><![CDATA[public function __construct($registry) {]]></search>
            <add position="after"><![CDATA[$this->log = $registry->get('log');]]></add>
        </operation>
        <operation>
            <search><![CDATA[public function getProducts() {]]></search>
            <add position="before"><![CDATA[
    public function getCartQuantity($product_id, $option = array(), $recurring_id = 0) {
        $cart_product_quantity = 0;
        if ( isset($this->session->data['cart']) ) {  // before Opencart 2.1.x
			foreach ($this->session->data['cart'] as $key => $cart_quantity) {
	          	$tmp_product = unserialize(base64_decode($key));
	            $tmp_product_id = $tmp_product['product_id'];
	            
	            $cart_options = isset($tmp_product['option']) ? $tmp_product['option'] : array();
	            //$this->log->write("Checking tmp_product_id: " . $tmp_product_id . " with product id: " . $product_id . " Options: " . var_export($cart_options, TRUE)); 
	            if ( (int) $tmp_product_id == $product_id) {
	              if ($option === $cart_options) { // check if arrays have the same keys/values in the same order
	                $cart_product_quantity = $cart_quantity;
	                //$this->log->write("Product quantity in cart: " . $cart_product_quantity); 
	                break;
	              }
	            }
			}
		} else { // after Opencart 2.1.x
			$query = $this->db->query("SELECT quantity FROM " . DB_PREFIX . "cart WHERE customer_id = '" . (int)$this->customer->getId() . "' AND session_id = '" . $this->db->escape($this->session->getId()) . "' AND product_id = '" . (int)$product_id . "' AND recurring_id = '" . (int)$recurring_id . "' AND `option` = '" . $this->db->escape(json_encode($option)) . "'");	
      		if (isset($query->row['quantity'])) {
        		return (int) $query->row['quantity'];
      		}		
		}
		return $cart_product_quantity;
	}
      ]]></add>
        </operation>
        <operation>
            <search><![CDATA[public function getProducts() {]]></search>
            <add position="before"><![CDATA[
	public function getCombinationAvailableStock($product_id, $selected_options) {
    //$this->log->write('Checking stock combination for product id: ' . $product_id . ' options: ' . var_export($selected_options, true) );
  
		//return TRUE;
		$query = $this->db->query("SELECT s.combination_id, s.quantity, so.product_option_value_id "
				. " FROM `" . DB_PREFIX . "stock` s "
				. " INNER JOIN `" . DB_PREFIX . "stock_option` so ON (s.combination_id = so.combination_id) " 
				. " WHERE s.product_id = '" . (int)$product_id . "' ORDER BY s.combination_id, so.product_option_value_id ");

		$found = 0; // FALSE;

		$combinations = array();
		$combination_id = 0;
		foreach($query->rows as $row) {
			if ($row['combination_id'] != $combination_id) {
				$combination_id = $row['combination_id'];
				$combinations[$combination_id] = array();
				$combinations[$combination_id]['combination_id'] = $combination_id;
				$combinations[$combination_id]['quantity'] = $row['quantity'];
				$combinations[$combination_id]['option_values'] = array();
			}
			$combinations[$combination_id]['option_values'][] = $row['product_option_value_id'];
		}
		
		$selected_options_length = count($selected_options);
		
		foreach($combinations as $key => $combination) {
			$option_values = $combination['option_values'];
      		//$this->log->write('Checking combination option values: ' . var_export($option_values, true));
			if (count($option_values) == $selected_options_length) {
				$combination_found = TRUE;
				foreach($selected_options as $selected_option) {
          			//$this->log->write('Checking selected option: ' . $selected_option . ' if exists in combination...');
					if (!in_array($selected_option, $option_values)) {
            			//$this->log->write('Option not found');
						$combination_found = FALSE;
						break;	
					} 
				}
				if ($combination_found) {
					$found = $combination['quantity'];
					break;
				}
			}
		}
    	//$this->log->write('Stock available ? ' . $found);
		return $found;
	}				
	  ]]></add>
        </operation>
        <operation>
            <search><![CDATA[$product_query = $this->db->query]]></search>
            <add position="before"><![CDATA[
			$c_product_id = isset($cart['product_id']) ? $cart['product_id'] : $product_id;
			$c_quantity = isset($cart['quantity']) ? $cart['quantity'] : $quantity;
		]]></add>
        </operation>
        <operation>
            <search><![CDATA[$option_query = $this->db->query("SELECT po.product_option_id]]></search>
            <add position="replace"><![CDATA[$option_query = $this->db->query("SELECT po.stock_enabled, po.product_option_id]]></add>
        </operation>
        <operation>
            <search><![CDATA[$option_data = array();]]></search>
            <add position="after"><![CDATA[          $stock_enabled_option_values = array();]]></add>
        </operation>
        <operation>
            <search><![CDATA[if ($option_query->row['type'] == 'select' || $option_query->row['type'] == 'radio']]></search>
            <add position="after"><![CDATA[
                if ( ($this->config->get('stock_module_enabled') == 1) && ($option_query->row['stock_enabled'] == 1) ) {
                  $stock_enabled_option_values[] = $value;
                }
      ]]></add>
        </operation>
        <operation>
            <search><![CDATA[$price = $product_query->row['price'];]]></search>
            <add position="before"><![CDATA[
          // populating quantity is not an additional burden because both product query and (if the module is enabled) 
          // combination quantity check already retrieves the product/combination quantity
          $stock_available = $product_query->row['quantity'];
          if ( ($this->config->get('stock_module_enabled') == 1) && (!empty($stock_enabled_option_values)) ) {
            $stock_available = $this->getCombinationAvailableStock($c_product_id, $stock_enabled_option_values);
            $is_available = $stock_available >= $c_quantity;
            if (!$is_available) {
              //$this->log->write('getCombinationAvailableStock returned FALSE');
              $stock = FALSE;
            }
          }
	   ]]></add>
        </operation>
        <operation>
            <search><![CDATA['stock'           => $stock,]]></search>
            <add position="after"><![CDATA[      	    'stock_available'           => $stock_available,]]></add>
        </operation>
    </file>
    <file error="log" path="catalog/view/theme/*/template/checkout/cart.tpl">
        <operation>
            <search><![CDATA[<?php if (!$product['stock']) { ?>]]></search>
            <add offset="2" position="replace"><![CDATA[
              <?php if (!$product['stock']) { ?>
              <span class="stock">***</span>
              <?php } ?>
              <?php if ( $config_stock_module['enabled'] && $config_stock_module['show_cart_quantities'] ) { 
                 if (isset($product['stock_available'])) { 
                   echo " (" . $product['stock_available'] . ")";
                 }
              } ?>
        ]]></add>
        </operation>
    </file>
    <file error="log" path="catalog/model/checkout/order.php">
        <operation>
            <search index="0"><![CDATA[$this->cache->delete('product');]]></search>
            <add position="before"><![CDATA[
    	if ( $this->config->get('stock_module_enabled') == 1 ) {
    		$this->load->model('catalog/stock');
    	  	if (!in_array($order_info['order_status_id'], array_merge($this->config->get('config_processing_status'), $this->config->get('config_complete_status'))) && in_array($order_status_id, array_merge($this->config->get('config_processing_status'), $this->config->get('config_complete_status')))) {
    	  	//$this->log->write('Charging stock');
    			$sm_product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'");
				$this->model_catalog_stock->chargeOrderOptionsStock($order_id, $sm_product_query->rows, false);
    	  	}
			if (in_array($order_info['order_status_id'], array_merge($this->config->get('config_processing_status'), $this->config->get('config_complete_status'))) && !in_array($order_status_id, array_merge($this->config->get('config_processing_status'), $this->config->get('config_complete_status')))) {    	
				//$this->log->write('Reclaiming stock');
				$sm_product_query = $this->db->query("SELECT * FROM " . DB_PREFIX . "order_product WHERE order_id = '" . (int)$order_id . "'");
				$this->model_catalog_stock->chargeOrderOptionsStock($order_id, $sm_product_query->rows, true);
			}
    	} 
	   ]]></add>
        </operation>
    </file>
</modification>
